---
title: "R for Data Science Notes"
subtitle: "STAT 359"
author: "Arturo Fonseca"

format:
  html:
    toc: true
    embed-resources: true
    link-external-newwindow: true
    
execute:
  warning: false

from: markdown+emoji
---

## Introduction

Import -\> tidy -\> transform -\> visualization -\> models -\> communication

## 1: Data Visualization

**Grammar of graphics**: a coherent system for describing and building graphs

"Tabular data is ***tidy*** if each value is placed in its own “cell”, each variable in its own column, and each observation in its own row"

**Tibble**: a data frame

"When aesthetic mappings are defined in `ggplot()`, at the *global* level, they’re passed down to each of the subsequent geom layers of the plot. However, each geom function in ggplot2 can also take a `mapping` argument, which allows for aesthetic mappings at the *local* level that are added to those inherited from the global level"

Final plot:

``` r
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(aes(color = species, shape = species)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", y = "Body mass (g)",
    color = "Species", shape = "Species"
  ) +
  scale_color_colorblind()
```

A variable is:

-   `categorical` if it can only take one of a small set of values

    -   Use bar chart

-   `numerical` if it can take a wide range of numerical values (continuous or discrete)

    -   Use histogram: `binwidth = x` or density plot

Relationships:

-   Numerical and categorical: boxplot or density plot

-   Categorical and numerical: stacked bar plot, relative frequency plot

-   Numerical and numerical: scatterplot, use `facet_wrap` for more complex plots

`ggsave(filename = "<name>")` will save the most recent plot created to your working directory

## 3: Data Transformation

-   `filter` (we know what it does already)
-   `arrange`: each subsequent column name is used to break ties, `desc` to reverse the order
-   `distinct`: removes duplicate rows and only keeps unique (combinations if columns supplied, `.keep_all` to not remove unspecified columns)
    -   `count` to count the number of occurrences of the combinations specified by the column names, `sort = TRUE` to arrange counts in descending order?

------------------------------------------------------------------------

-   `mutate`: add a new column, `.before = 1` argument to add columns to the left-hand side instead, `.keep = "used"` to only keep columns that were used in the calculations
-   `select`: keep only columns you're interested in (`select(year, month)`, `select(year:month)`, `select(!year:month)`, `select(where(<condition>))`, rename using `=`)
-   `rename`: renames column names
-   `relocate`: moves variables to the front by default, can be specified using `.before` and `.after` arguments like in `mutate`

------------------------------------------------------------------------

**The pipe**

-   Allows data to be passed into the first argument of the next function

------------------------------------------------------------------------

**Groups**

-   `group_by`: by itself doesn't do anything but adds groups on top of the data

-   `summarize`: reduces data into a single row for each group

-   `slice_...`: functions take the `n` results from a data frame, set `with_ties = FALSE` to get only 1 result per tie

-   `ungroup`: removes groups from a data frame

-   `.by`: can also use this argument as a substitute for `group_by`/`ungroup` (`.by = c(origin, dest)`)

## 4: Workflow: Code Style

-   Consistent style

-   Strive for smaller pipes

## 7: Data Import

-   Most common rectangular data file type: `csv`

-   `read_csv` takes a path, and an `na` argument to specify what counts as `NA` in the file, `skip = <num>` to skip metadata lines, `comment = <chr>` for comments, `col_names = <bool>/<vector of intended names>` to specify whether the csv has a header

    -   `col_types` takes a list of types for each of its columns, or `cols(.default = <type>)`, or `cols_only(x = <type>)`

-   Use `janitor::clean_names()` to clean up names all in one sweep

-   Use `if_else` to make a variable based on a condition

-   Load in multiple files by using `list.files`, with arguments `pattern = <chr>`, `full_names = <bool>`

------------------------------------------------------------------------

**Writing to a file**

-   `write_c(/t)sv`: takes in the data frame and a path, **NOTE**: data is lost when writing then reading since it's plain text
    -   Instead use R's custom binary format called `RDS` (`write/read_rds(<data>, <path>)`)

------------------------------------------------------------------------

**Data entry**

-   `tibble`: allows you to enter data column-wise

-   `tribble`: does the opposite (using **t**ransposed ti**bble**)

### Class notes

`read.csv` vs `read_csv`: tidyverse functions always have underscores, we will be using tidyverse functions `data.frame` vs `tibble`

```{r}
library(tidyverse)
# base R
df <- data.frame(abc = 1, xyz = "a")

# tidyverse
tibble <- tibble(abc = 1, xyz = "a")

is_tibble(df)
is_tibble(tibble)

df$x
tibble$x

df[, "xyz"] # returns a vector
tibble[, "xyz"] # returns a tibble

df[, c("abc", "xyz")] # returns a data frame
tibble[, c("abc", "xyz")] # returns a tibble
```

```{r}
# write.csv(df, "data/df.csv") # adds unnecessary index
# write_csv(tibble, "data/tibble.csv") # writes data as is
```

```{r}
# df1 <- read.csv("data/df.csv")
# tibble1 <- read_csv("data/tibble.csv")

# is_tibble(df1) # FALSE
# is_tibble(tibble1) # TRUE

# df1 # results in the scroll of death

# tibble1 # prints only first 10 rows
```

## 5: Data Tidying

Tidy attributes:

1.  Each variable is a column
2.  Each observation is a row
3.  Each value is a cell

`tidyr` provides two functions: `pivot_longer` and `pivot_wider`

-   `pivot_longer`: three 3 arguments: `cols`, `names_to`, and `values_to`, also `values_drop_na` removes unnecessary observations

    -   Use `names_sep` for a delimiter to separate column column names (`sp_m_014` -\> `sp`, `m`, `014`)

    -   Use the special `".value"` in `names_to` to tell `pivot_longer` to override the `values_to` argument

-   `pivot_wider`: `id_cols`, `names_from`, `values_from`

## 19: Joins

Two important types of joins: mutating joins and filtering joins

**Keys**

-   **Primary key** uniquely identifies each observation (**compound key** when more than one variable is needed)

-   **Foreign key** corresponds to a primary key in another table

-   **Surrogate key** makes a primary key for a table

**Joins**

-   **Mutating join** allows you to combine variables from two data frames

    -   `left_join`'s output will always have the same rows as `x`, will use a **natural** join (columns appearing in both data frames), but doesn't always work

        -   Use `join_by` to specify column names to join by

-   **Filtering joins** filters the rows: **semi-joins** and **anti-joins**

    -   **Semi-joins** keep all rows in `x` that have a match in `y`

    -   **Anti-joins** are the opposite, they return all rows in `x` that don't have a match in `y`

**Non-equi joins**

-   **Cross joins**: match every pair of rows

    -   Cartesian product

-   **Inequality joins**: use boolean operators

-   **Rolling joins**: similar to inequality joins but find the closest math

    -   Add `closest(<condition>)` to make into a rolling join

-   **Overlap joins**: special type of inequality join designed to work with ranges

    -   Three helpers: `between`, `within`, and `overlaps`

### Class notes

Using the `Lahman` package

```{r}
library(Lahman)
library(tidyverse)
pitcher_salary <- Pitching |>
  left_join(Salaries)
```

`fill` to fill data

## 16: Factors

-   Used for categorical variables
-   First, create a list of valid **levels** (order matters)
    -   Values not present in `levels` will be `NA`
    -   Access to levels directly using `levels()`
    -   Use `col_factors()` to convert data when reading in
-   To view levels of a factor variable, use `count(<var>)`
-   Use `factor_reorder()` to reorganize your factors:
    -   `.f` takes in the factor
    -   `.x` takes in the numerical vector by which to order the levels
    -   `.fun` optional function if there are multiple `.x` per `.f`
    -   `ggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) + geom_point()`
    -   Eventually, move out of `aes` and into a separate `mutate` call
-   Use `fct_relevel(.f, ...)` bring certain levels to the front
-   Use `fct_reorder2` reorders the factor `.f` by the `.y` values associated with the largest `.x` values
-   Use `fct_infreq` in conjunction with `fct_rev` to order levels in increasing frequency (bar plots?)

------------------------------------------------------------------------

-   `fct_recode` changes the value of each level

-   `fct_collapse` to group many different factors together

-   `fct_lump_*` family of functions to squish factors into a desired length

-   `ordered` to create an order for factors

## 17: Dates and Times

-   `readr` automatically recognizes the **ISO8601** format

-   Use `col_types` + `col_date`/`col_datetime` to convert column to a date/datetime format

-   `lubridate`'s helpers `ymd` and friends to create from string

    -   Force the creation of a datetime object by supplying a `tz`

-   Use `make_date`/`make_datetime` to make a date/datetime from multiple columns

-   `as_date` and `as_datetime` to convert to/from formats

------------------------------------------------------------------------

You can pull out individual parts of the date with the accessor functions [`year()`](https://lubridate.tidyverse.org/reference/year.html), [`month()`](https://lubridate.tidyverse.org/reference/month.html), [`mday()`](https://lubridate.tidyverse.org/reference/day.html) (day of the month), [`yday()`](https://lubridate.tidyverse.org/reference/day.html) (day of the year), [`wday()`](https://lubridate.tidyverse.org/reference/day.html) (day of the week), [`hour()`](https://lubridate.tidyverse.org/reference/hour.html), [`minute()`](https://lubridate.tidyverse.org/reference/minute.html), and [`second()`](https://lubridate.tidyverse.org/reference/second.html). These are effectively the opposites of [`make_datetime()`](https://lubridate.tidyverse.org/reference/make_datetime.html).

-   Set `label = TRUE` for abbreviated names of days of the week

    -   `abbr = FALSE` for full weekday names

------------------------------------------------------------------------

Rounding data

-   `floor_date()`, `round_date()`, `ceiling_date()`: `(<dates_vector>, <unit>)`

------------------------------------------------------------------------

Modifying data

-   `<unit>(<date>) <- <value>` or `update(<date>, <unit> = <value>, ...)`

------------------------------------------------------------------------

Time spans

-   Duration

    -   Lubridate treats `difftime` objects as seconds

    -   Might not be what you expect

-   Period

    -   More likely to be what you expect

-   Interval

    -   Create an interval by using `%--%`

------------------------------------------------------------------------

Time zones

-   Lubridate always uses UTC

### Class notes

```
auto_clean <- Auto |>
  mutate(origin = factor(origin,
                         levels = c(1, 2, 3),
                         labels = "American", "European", "Japanese"))

auto_clean <- auto_clean |>
  mutate(origin = fct_relevel(origin))
```

`fct_collapse`: specify the name of each new level and which sub-levels belong to it period
`fct_lump`: create a column "other" for few observation values
